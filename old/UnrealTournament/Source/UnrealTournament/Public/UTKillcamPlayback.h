// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.

#pragma once
#include "Object.h"
#include "Engine/DemoNetDriver.h"
#include "UTKillcamPlayback.generated.h"

class AActor;
class APlayerController;
class FNetworkGUID;
class FString;
class UPackage;
class UWorld;

struct FNetworkReplayStreamInfo;
struct FURL;
struct FWorldContext;

extern TAutoConsoleVariable<int32> CVarUTEnableInstantReplay;
extern TAutoConsoleVariable<float> CVarUTKillcamRewindTime;
extern TAutoConsoleVariable<float> CVarUTCoolMomentRewindTime;

/**
 * A class that manages an instance of a world used for playing back a killcam replay.
 * Typically an instance of this will be owned by the ULocalPlayer.
 * The killcam playback world is created by duplicating a source live world, similar to how PIE instances are created.
 * Playback itself uses the network replay streaming functionality to view recent action from the live game.
 */
UCLASS(Transient)
class UNREALTOURNAMENT_API UUTKillcamPlayback : public UObject
{
	GENERATED_BODY()

public:
	/** Default constructor, after running, this will be an "empty", disabled playback instance. */
	UUTKillcamPlayback();

	/** Removes the outside world reference from the world context. */
	virtual void BeginDestroy() override;

	// Public API to other modules

	/**
	 * Start playing back a previously recorded replay, using the given friendly name.
	 * Usually this is handled by the engine and name passed in was generated by UGameInstance::StartRecordingKillcamReplay.
	 */
	void PlayKillcamReplay(const FString& ReplayUniqueName);

	/** Returns a pointer to the UWorld being used for playback. */
	UWorld* GetKillcamWorld() const { return KillcamWorld; }
		
	/**
	 * Starts the process of playing and switching to the killcam world.
	 *
	 * @param FocusActorGUID The network GUID of the actor the camera will focus on in the killcam world. Bunches for this actor will not be queued during playback so that it is available immediately.
	 */
	void KillcamStart(const float RewindDemoSeconds, const FNetworkGUID FocusActorGUID);

	void CoolMomentCamStart(const float RewindDemoSeconds, const FUniqueNetIdRepl FocusActorNetId);

	/** Stops playback of the killcam world and switches the view to the live world. */
	void KillcamStop();

	/** Scrubs killcam playback back to when KillcamStart() was called. */
	void KillcamRestart();

	/** Returns the APlayerController that represents the replay spectator in the killcam world. */
	APlayerController* GetKillcamSpectatorController();

	/**
	 * Returns a pointer to the copy of the actor in the killcam world that corresponds to an actor in the live world.
	 * The association is found by correlating the actor's FNetworkGUIDs.
	 *
	 * @param InActor A pointer to an actor in the live world.
	 *
	 * @return The copy of InActor in the killcam world, or null if one couldn't be found.
	 */
	AActor* GetKillcamActorFromLiveActor(AActor* InActor);

	/** Returns true if the killcam world should be the world that's currently displayed to the user. */
	bool IsEnabled() const;

	/**
	 * Creates a killcam world by duplicating the world in the SourceWorldContext, if one exists.
	 * This will cause the copies of the source world's package and any streaming levels to be renamed with a KILLCAM_ prefix,
	 * similar to how packages in PIE instances are renamed.
	 *
	 * @param InURL The URL that was used to load the source world.
	 * @param SourceWorldContext The context for the source world that is recording the killcam replay.
	 */
	void CreateKillcamWorld(const FURL& InURL, const FWorldContext& SourceWorldContext);

	/**
	 * Destroys and nulls out the killcam world and world context pointers so that they may be garbage collected.
	 *
	 * @param SourceWorldContext The context for the source world that is (or was) recording the killcam replay.
	 */
	void CleanUpKillcam(UWorld* World, bool bSessionEnded, bool bCleanupResources);

	/**
	 * Force whether or not to show the killcam world to the player, may be used outside the scope of KillcamRewind and KillcamStop.
	 * Useful for implementing debugging commands.
	 *
	 * @param bInIsEnabled The new enabled value.
	 */
	void ForceSetIsEnabled(bool bInIsEnabled) { bIsEnabled = bInIsEnabled; }

	/** Returns the name of the replay streamer implementation that should be used. Reads from the engine config. */
	static FString GetKillcamReplayStreamerName();

	/** Returns true if World is the killcam world for any local player in GameInstance, false otherwise. */
	static bool IsKillcamWorld(const UGameInstance* const GameInstance, const UWorld* const World);

	/** Console command handler */
	static void HandleKillcamToggleCommand(UWorld* InWorld);

private:
	/** Pointer to the actual world used for playback. */
	UPROPERTY()
	UWorld* KillcamWorld;

	/** Pointer to the playback world's package. */
	UPROPERTY()
	UPackage* KillcamWorldPackage;

	/** The world that is recording the replay for the KillcamWorld to play back. */
	TWeakObjectPtr<UWorld> SourceWorld;

	/** Whether or not the killcam world should be displayed to the user. */
	bool bIsEnabled;
	
	/** Keep track of how many killcam worlds we've created, to properly set the PIEInstanceID */
	static int32 NumWorldsCreated;

	/** Handle to delegate used to clean up the killcam world when its source world is cleaned up. */
	FDelegateHandle OnWorldCleanupHandle;

	/** Handle to PostLoadMap delegate. Used to set ShouldTick on the playback world when it's loaded. */
	FDelegateHandle OnPostLoadMapHandle;

	/** Cached time in seconds from the last call to KillcamGoToTime, for KillcamRestart */
	float CachedGoToTimeSeconds;

	/** Cached net GUID of the focused actor from the last call to KillcamGoToTime, for KillcamRestart */
	FNetworkGUID CachedFocusActorGUID;

	/**
	 * Uses the underlying replay streaming implementation to asynchronously go to a time relative to the current time.
	 * When complete, the default view will switch from the live world to the killcam world so that the player can see it.
	 *
	 * @param TimeInSeconds Absolute demo time to go to.
	 * @param FocusActor May be a default/invalid GUID. If valid, the system will attempt to have the corresponding actor loaded and spawned as soon as the OnGotoTimeDelegate fires.
	 * @param InOnGotoTimeDelegate Delegate that will execute when the replay streaming implementation has completed its GotoTime operation.
	 */
	void KillcamGoToTime(const float TimeInSeconds, const FNetworkGUID FocusActor, const FOnGotoTimeDelegate& InOnGotoTimeDelegate = FOnGotoTimeDelegate());

	/** Callback used by KillcamRewind. */
	void OnKillcamGoToTimeComplete(bool bWasSuccessful, FOnGotoTimeDelegate UserDelegate);

	void OnKillcamReady(bool bWasSuccessful, FNetworkGUID InKillcamViewTargetGUID);

	void OnCoolMomentCamReady(bool bWasSuccessful, FUniqueNetIdRepl InCoolMomentViewTargetNetId);

	/** Chokepoint for switching the UI to show the killcam world and HUD */
	void ShowKillcamToUser();

	/** Chokepoint for switching the UI to the live world and hiding the killcam world and HUD */
	void HideKillcamFromUser();
	
	/** Added as the delegate for PostLoadMap for the playback world. */
	void OnPostLoadMap();

	/** Sets ShouldTick on the playback world to false. */
	void SetPlaybackWorldShouldTick(const bool bShouldTick);
};

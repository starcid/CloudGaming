// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "UTCharacter.h"
#include "UTPathBuilderInterface.h"
#include "UTTeamInterface.h"

#include "UTGameObjective.generated.h"

UCLASS(Blueprintable, meta = (ChildCanTick))
class UNREALTOURNAMENT_API AUTGameObjective : public AActor, public IUTPathBuilderInterface, public IUTTeamInterface
{
	GENERATED_UCLASS_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
	float InitialSpawnDelay;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
	TSubclassOf<AUTCarriedObject> CarriedObjectClass;

	/** Best angle to view this objective (for spectator cams). */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
	float BestViewYaw;

	UPROPERTY(EditAnywhere, Replicated, BlueprintReadOnly, Category = GameObjective)
	uint8 TeamNum;

	/** defense points for the AI to consider when defending this objective */
	UPROPERTY(BlueprintReadWrite, Category = AI)
	TArray<class AUTDefensePoint*> DefensePoints;

	/** if set, some defense points will be automatically generated in the vicinity of the objective in addition to whatever is placed in the level */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = AI)
	bool bAutogenerateDefensePoints;

	/**
	 *	Called from UTGameMode - Initializes all of the GameObjectives before BeginPlay because
	 *  BeginPlay for them would happen outside of the normal expected order
	 **/
	virtual void InitializeObjective();

	/** add some defense points for this objective in reasonable nearby locations */
	virtual void GenerateDefensePoints();

	/**	This is a server-side function that is called by CarriedObject when it's state is changed.*/
	virtual void ObjectStateWasChanged(FName NewObjectState);

	/**	Will be called via the GameObject when it has been picked up.*/
	virtual void ObjectWasPickedUp(AUTCharacter* NewHolder, bool bWasHome);

	/**	Will be called via the GameObject when this object has been dropped*/
	virtual void ObjectWasDropped(AUTCharacter* LastHolder);

	/**	Will be called when the GameObject has been returned home*/
	virtual void ObjectReturnedHome(AUTCharacter* Returner);

	/**	@returns the carried object*/
	virtual AUTCarriedObject* GetCarriedObject() const;

	/**	@returns the state of the owned UTCarriedObject*/
	virtual FName GetCarriedObjectState() const;

	/**	@returns the PlayerState of the UTCharacter holding CarriedObject otherwise returns NULL*/
	virtual AUTPlayerState* GetCarriedObjectHolder();

	/** Within this distance is considered last second save. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
	float LastSecondSaveDistance;

	/** How far off center is considered forward for incoming messages.  (1.0 is straight forward, cos of angle) */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
		float ForwardDot;

	/** How far off center to consider incoming direction as high or low */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
		float HighLowDot;

	/** How far off center is considered forward for incoming messages.  (1.0 is straight forward, cos of angle) */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = GameObjective)
		float IncomingHeightOffset;

	/** Return true if Other is within LastSecondSaveDistance. */
	virtual bool ActorIsNearMe(AActor *Other) const;

	virtual uint8 GetTeamNum() const
	{
		return TeamNum;
	}

	virtual void SetTeamForSideSwap_Implementation(uint8 NewTeamNum) override
	{
		if (Role == ROLE_Authority)
		{
			TeamNum = NewTeamNum;

			if (CarriedObject != NULL)
			{
				CarriedObject->Destroy();
			}
			CreateCarriedObject();
			AUTGameMode* Game = GetWorld()->GetAuthGameMode<AUTGameMode>();
			if (Game != NULL)
			{
				Game->GameObjectiveInitialized(this);
			}
		}
	}
protected:

	// Holds the actual object
	UPROPERTY(BlueprintReadOnly, Replicated, Category = GameObject)
	AUTCarriedObject* CarriedObject;

	UPROPERTY(Replicated, BlueprintReadOnly, Category = GameObject)
	AUTPlayerState* CarriedObjectHolder;
	
	/**	The owned game object replicates it's state via it's base.*/
	UPROPERTY(BlueprintReadOnly, Replicated, ReplicatedUsing = OnObjectStateChanged, Category = GameObject)
	FName CarriedObjectState;

	virtual void CreateCarriedObject();

	/**	Called when CarriedObject's state changes and is replicated to the client*/
	UFUNCTION()
	virtual void OnObjectStateChanged();
};